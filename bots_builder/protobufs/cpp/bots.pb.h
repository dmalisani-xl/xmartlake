// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bots.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bots_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bots_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bots_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bots_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bots_2eproto;
class BotResponse;
class BotResponseDefaultTypeInternal;
extern BotResponseDefaultTypeInternal _BotResponse_default_instance_;
class BuildRequest;
class BuildRequestDefaultTypeInternal;
extern BuildRequestDefaultTypeInternal _BuildRequest_default_instance_;
class BuildResponse;
class BuildResponseDefaultTypeInternal;
extern BuildResponseDefaultTypeInternal _BuildResponse_default_instance_;
class CallToBot;
class CallToBotDefaultTypeInternal;
extern CallToBotDefaultTypeInternal _CallToBot_default_instance_;
class EmptyMessage;
class EmptyMessageDefaultTypeInternal;
extern EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
class PlayerResponse;
class PlayerResponseDefaultTypeInternal;
extern PlayerResponseDefaultTypeInternal _PlayerResponse_default_instance_;
class Pong;
class PongDefaultTypeInternal;
extern PongDefaultTypeInternal _Pong_default_instance_;
class TurnMessage;
class TurnMessageDefaultTypeInternal;
extern TurnMessageDefaultTypeInternal _TurnMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BotResponse* Arena::CreateMaybeMessage<::BotResponse>(Arena*);
template<> ::BuildRequest* Arena::CreateMaybeMessage<::BuildRequest>(Arena*);
template<> ::BuildResponse* Arena::CreateMaybeMessage<::BuildResponse>(Arena*);
template<> ::CallToBot* Arena::CreateMaybeMessage<::CallToBot>(Arena*);
template<> ::EmptyMessage* Arena::CreateMaybeMessage<::EmptyMessage>(Arena*);
template<> ::PlayerResponse* Arena::CreateMaybeMessage<::PlayerResponse>(Arena*);
template<> ::Pong* Arena::CreateMaybeMessage<::Pong>(Arena*);
template<> ::TurnMessage* Arena::CreateMaybeMessage<::TurnMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EmptyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EmptyMessage) */ {
 public:
  inline EmptyMessage() : EmptyMessage(nullptr) {};
  virtual ~EmptyMessage();

  EmptyMessage(const EmptyMessage& from);
  EmptyMessage(EmptyMessage&& from) noexcept
    : EmptyMessage() {
    *this = ::std::move(from);
  }

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyMessage& operator=(EmptyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyMessage* internal_default_instance() {
    return reinterpret_cast<const EmptyMessage*>(
               &_EmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyMessage& a, EmptyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyMessage* New() const final {
    return CreateMaybeMessage<EmptyMessage>(nullptr);
  }

  EmptyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyMessage& from);
  void MergeFrom(const EmptyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EmptyMessage";
  }
  protected:
  explicit EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EmptyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// -------------------------------------------------------------------

class Pong PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pong) */ {
 public:
  inline Pong() : Pong(nullptr) {};
  virtual ~Pong();

  Pong(const Pong& from);
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pong& operator=(Pong&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }
  inline void Swap(Pong* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pong* New() const final {
    return CreateMaybeMessage<Pong>(nullptr);
  }

  Pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pong";
  }
  protected:
  explicit Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
  };
  // string ack = 1;
  void clear_ack();
  const std::string& ack() const;
  void set_ack(const std::string& value);
  void set_ack(std::string&& value);
  void set_ack(const char* value);
  void set_ack(const char* value, size_t size);
  std::string* mutable_ack();
  std::string* release_ack();
  void set_allocated_ack(std::string* ack);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ack();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ack(
      std::string* ack);
  private:
  const std::string& _internal_ack() const;
  void _internal_set_ack(const std::string& value);
  std::string* _internal_mutable_ack();
  public:

  // @@protoc_insertion_point(class_scope:Pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// -------------------------------------------------------------------

class CallToBot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CallToBot) */ {
 public:
  inline CallToBot() : CallToBot(nullptr) {};
  virtual ~CallToBot();

  CallToBot(const CallToBot& from);
  CallToBot(CallToBot&& from) noexcept
    : CallToBot() {
    *this = ::std::move(from);
  }

  inline CallToBot& operator=(const CallToBot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallToBot& operator=(CallToBot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallToBot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallToBot* internal_default_instance() {
    return reinterpret_cast<const CallToBot*>(
               &_CallToBot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CallToBot& a, CallToBot& b) {
    a.Swap(&b);
  }
  inline void Swap(CallToBot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallToBot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallToBot* New() const final {
    return CreateMaybeMessage<CallToBot>(nullptr);
  }

  CallToBot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallToBot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallToBot& from);
  void MergeFrom(const CallToBot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallToBot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CallToBot";
  }
  protected:
  explicit CallToBot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotIdFieldNumber = 1,
    kParameterFieldNumber = 2,
  };
  // string botId = 1;
  void clear_botid();
  const std::string& botid() const;
  void set_botid(const std::string& value);
  void set_botid(std::string&& value);
  void set_botid(const char* value);
  void set_botid(const char* value, size_t size);
  std::string* mutable_botid();
  std::string* release_botid();
  void set_allocated_botid(std::string* botid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_botid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_botid(
      std::string* botid);
  private:
  const std::string& _internal_botid() const;
  void _internal_set_botid(const std::string& value);
  std::string* _internal_mutable_botid();
  public:

  // string parameter = 2;
  void clear_parameter();
  const std::string& parameter() const;
  void set_parameter(const std::string& value);
  void set_parameter(std::string&& value);
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  std::string* mutable_parameter();
  std::string* release_parameter();
  void set_allocated_parameter(std::string* parameter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parameter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parameter(
      std::string* parameter);
  private:
  const std::string& _internal_parameter() const;
  void _internal_set_parameter(const std::string& value);
  std::string* _internal_mutable_parameter();
  public:

  // @@protoc_insertion_point(class_scope:CallToBot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr botid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// -------------------------------------------------------------------

class BotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BotResponse) */ {
 public:
  inline BotResponse() : BotResponse(nullptr) {};
  virtual ~BotResponse();

  BotResponse(const BotResponse& from);
  BotResponse(BotResponse&& from) noexcept
    : BotResponse() {
    *this = ::std::move(from);
  }

  inline BotResponse& operator=(const BotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotResponse& operator=(BotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BotResponse* internal_default_instance() {
    return reinterpret_cast<const BotResponse*>(
               &_BotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BotResponse& a, BotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotResponse* New() const final {
    return CreateMaybeMessage<BotResponse>(nullptr);
  }

  BotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotResponse& from);
  void MergeFrom(const BotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BotResponse";
  }
  protected:
  explicit BotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:BotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// -------------------------------------------------------------------

class BuildRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildRequest) */ {
 public:
  inline BuildRequest() : BuildRequest(nullptr) {};
  virtual ~BuildRequest();

  BuildRequest(const BuildRequest& from);
  BuildRequest(BuildRequest&& from) noexcept
    : BuildRequest() {
    *this = ::std::move(from);
  }

  inline BuildRequest& operator=(const BuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildRequest& operator=(BuildRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildRequest* internal_default_instance() {
    return reinterpret_cast<const BuildRequest*>(
               &_BuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BuildRequest& a, BuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildRequest* New() const final {
    return CreateMaybeMessage<BuildRequest>(nullptr);
  }

  BuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildRequest& from);
  void MergeFrom(const BuildRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildRequest";
  }
  protected:
  explicit BuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotIdFieldNumber = 1,
    kLanguageFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string botId = 1;
  void clear_botid();
  const std::string& botid() const;
  void set_botid(const std::string& value);
  void set_botid(std::string&& value);
  void set_botid(const char* value);
  void set_botid(const char* value, size_t size);
  std::string* mutable_botid();
  std::string* release_botid();
  void set_allocated_botid(std::string* botid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_botid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_botid(
      std::string* botid);
  private:
  const std::string& _internal_botid() const;
  void _internal_set_botid(const std::string& value);
  std::string* _internal_mutable_botid();
  public:

  // string language = 2;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_language();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_language(
      std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_code(
      std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:BuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr botid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// -------------------------------------------------------------------

class BuildResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildResponse) */ {
 public:
  inline BuildResponse() : BuildResponse(nullptr) {};
  virtual ~BuildResponse();

  BuildResponse(const BuildResponse& from);
  BuildResponse(BuildResponse&& from) noexcept
    : BuildResponse() {
    *this = ::std::move(from);
  }

  inline BuildResponse& operator=(const BuildResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildResponse& operator=(BuildResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildResponse* internal_default_instance() {
    return reinterpret_cast<const BuildResponse*>(
               &_BuildResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BuildResponse& a, BuildResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildResponse* New() const final {
    return CreateMaybeMessage<BuildResponse>(nullptr);
  }

  BuildResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildResponse& from);
  void MergeFrom(const BuildResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildResponse";
  }
  protected:
  explicit BuildResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 1,
  };
  // string imageId = 1;
  void clear_imageid();
  const std::string& imageid() const;
  void set_imageid(const std::string& value);
  void set_imageid(std::string&& value);
  void set_imageid(const char* value);
  void set_imageid(const char* value, size_t size);
  std::string* mutable_imageid();
  std::string* release_imageid();
  void set_allocated_imageid(std::string* imageid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imageid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imageid(
      std::string* imageid);
  private:
  const std::string& _internal_imageid() const;
  void _internal_set_imageid(const std::string& value);
  std::string* _internal_mutable_imageid();
  public:

  // @@protoc_insertion_point(class_scope:BuildResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imageid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// -------------------------------------------------------------------

class TurnMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TurnMessage) */ {
 public:
  inline TurnMessage() : TurnMessage(nullptr) {};
  virtual ~TurnMessage();

  TurnMessage(const TurnMessage& from);
  TurnMessage(TurnMessage&& from) noexcept
    : TurnMessage() {
    *this = ::std::move(from);
  }

  inline TurnMessage& operator=(const TurnMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnMessage& operator=(TurnMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TurnMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TurnMessage* internal_default_instance() {
    return reinterpret_cast<const TurnMessage*>(
               &_TurnMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TurnMessage& a, TurnMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TurnMessage* New() const final {
    return CreateMaybeMessage<TurnMessage>(nullptr);
  }

  TurnMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TurnMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TurnMessage& from);
  void MergeFrom(const TurnMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TurnMessage";
  }
  protected:
  explicit TurnMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 1,
  };
  // string parameter = 1;
  void clear_parameter();
  const std::string& parameter() const;
  void set_parameter(const std::string& value);
  void set_parameter(std::string&& value);
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  std::string* mutable_parameter();
  std::string* release_parameter();
  void set_allocated_parameter(std::string* parameter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parameter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parameter(
      std::string* parameter);
  private:
  const std::string& _internal_parameter() const;
  void _internal_set_parameter(const std::string& value);
  std::string* _internal_mutable_parameter();
  public:

  // @@protoc_insertion_point(class_scope:TurnMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// -------------------------------------------------------------------

class PlayerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerResponse) */ {
 public:
  inline PlayerResponse() : PlayerResponse(nullptr) {};
  virtual ~PlayerResponse();

  PlayerResponse(const PlayerResponse& from);
  PlayerResponse(PlayerResponse&& from) noexcept
    : PlayerResponse() {
    *this = ::std::move(from);
  }

  inline PlayerResponse& operator=(const PlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerResponse& operator=(PlayerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerResponse*>(
               &_PlayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerResponse& a, PlayerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerResponse* New() const final {
    return CreateMaybeMessage<PlayerResponse>(nullptr);
  }

  PlayerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerResponse& from);
  void MergeFrom(const PlayerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerResponse";
  }
  protected:
  explicit PlayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bots_2eproto);
    return ::descriptor_table_bots_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response(
      std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:PlayerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bots_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyMessage

// -------------------------------------------------------------------

// Pong

// string ack = 1;
inline void Pong::clear_ack() {
  ack_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pong::ack() const {
  // @@protoc_insertion_point(field_get:Pong.ack)
  return _internal_ack();
}
inline void Pong::set_ack(const std::string& value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:Pong.ack)
}
inline std::string* Pong::mutable_ack() {
  // @@protoc_insertion_point(field_mutable:Pong.ack)
  return _internal_mutable_ack();
}
inline const std::string& Pong::_internal_ack() const {
  return ack_.Get();
}
inline void Pong::_internal_set_ack(const std::string& value) {
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pong::set_ack(std::string&& value) {
  
  ack_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Pong.ack)
}
inline void Pong::set_ack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Pong.ack)
}
inline void Pong::set_ack(const char* value,
    size_t size) {
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Pong.ack)
}
inline std::string* Pong::_internal_mutable_ack() {
  
  return ack_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pong::release_ack() {
  // @@protoc_insertion_point(field_release:Pong.ack)
  return ack_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pong::set_allocated_ack(std::string* ack) {
  if (ack != nullptr) {
    
  } else {
    
  }
  ack_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ack,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Pong.ack)
}
inline std::string* Pong::unsafe_arena_release_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Pong.ack)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ack_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pong::unsafe_arena_set_allocated_ack(
    std::string* ack) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ack != nullptr) {
    
  } else {
    
  }
  ack_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ack, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Pong.ack)
}

// -------------------------------------------------------------------

// CallToBot

// string botId = 1;
inline void CallToBot::clear_botid() {
  botid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CallToBot::botid() const {
  // @@protoc_insertion_point(field_get:CallToBot.botId)
  return _internal_botid();
}
inline void CallToBot::set_botid(const std::string& value) {
  _internal_set_botid(value);
  // @@protoc_insertion_point(field_set:CallToBot.botId)
}
inline std::string* CallToBot::mutable_botid() {
  // @@protoc_insertion_point(field_mutable:CallToBot.botId)
  return _internal_mutable_botid();
}
inline const std::string& CallToBot::_internal_botid() const {
  return botid_.Get();
}
inline void CallToBot::_internal_set_botid(const std::string& value) {
  
  botid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CallToBot::set_botid(std::string&& value) {
  
  botid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CallToBot.botId)
}
inline void CallToBot::set_botid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  botid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CallToBot.botId)
}
inline void CallToBot::set_botid(const char* value,
    size_t size) {
  
  botid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CallToBot.botId)
}
inline std::string* CallToBot::_internal_mutable_botid() {
  
  return botid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CallToBot::release_botid() {
  // @@protoc_insertion_point(field_release:CallToBot.botId)
  return botid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CallToBot::set_allocated_botid(std::string* botid) {
  if (botid != nullptr) {
    
  } else {
    
  }
  botid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), botid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CallToBot.botId)
}
inline std::string* CallToBot::unsafe_arena_release_botid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CallToBot.botId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return botid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CallToBot::unsafe_arena_set_allocated_botid(
    std::string* botid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (botid != nullptr) {
    
  } else {
    
  }
  botid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      botid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CallToBot.botId)
}

// string parameter = 2;
inline void CallToBot::clear_parameter() {
  parameter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CallToBot::parameter() const {
  // @@protoc_insertion_point(field_get:CallToBot.parameter)
  return _internal_parameter();
}
inline void CallToBot::set_parameter(const std::string& value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:CallToBot.parameter)
}
inline std::string* CallToBot::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:CallToBot.parameter)
  return _internal_mutable_parameter();
}
inline const std::string& CallToBot::_internal_parameter() const {
  return parameter_.Get();
}
inline void CallToBot::_internal_set_parameter(const std::string& value) {
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CallToBot::set_parameter(std::string&& value) {
  
  parameter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CallToBot.parameter)
}
inline void CallToBot::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CallToBot.parameter)
}
inline void CallToBot::set_parameter(const char* value,
    size_t size) {
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CallToBot.parameter)
}
inline std::string* CallToBot::_internal_mutable_parameter() {
  
  return parameter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CallToBot::release_parameter() {
  // @@protoc_insertion_point(field_release:CallToBot.parameter)
  return parameter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CallToBot::set_allocated_parameter(std::string* parameter) {
  if (parameter != nullptr) {
    
  } else {
    
  }
  parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CallToBot.parameter)
}
inline std::string* CallToBot::unsafe_arena_release_parameter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CallToBot.parameter)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return parameter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CallToBot::unsafe_arena_set_allocated_parameter(
    std::string* parameter) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parameter != nullptr) {
    
  } else {
    
  }
  parameter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parameter, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CallToBot.parameter)
}

// -------------------------------------------------------------------

// BotResponse

// string response = 1;
inline void BotResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BotResponse::response() const {
  // @@protoc_insertion_point(field_get:BotResponse.response)
  return _internal_response();
}
inline void BotResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:BotResponse.response)
}
inline std::string* BotResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:BotResponse.response)
  return _internal_mutable_response();
}
inline const std::string& BotResponse::_internal_response() const {
  return response_.Get();
}
inline void BotResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BotResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BotResponse.response)
}
inline void BotResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BotResponse.response)
}
inline void BotResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BotResponse.response)
}
inline std::string* BotResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BotResponse::release_response() {
  // @@protoc_insertion_point(field_release:BotResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BotResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BotResponse.response)
}
inline std::string* BotResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BotResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BotResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BotResponse.response)
}

// -------------------------------------------------------------------

// BuildRequest

// string botId = 1;
inline void BuildRequest::clear_botid() {
  botid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BuildRequest::botid() const {
  // @@protoc_insertion_point(field_get:BuildRequest.botId)
  return _internal_botid();
}
inline void BuildRequest::set_botid(const std::string& value) {
  _internal_set_botid(value);
  // @@protoc_insertion_point(field_set:BuildRequest.botId)
}
inline std::string* BuildRequest::mutable_botid() {
  // @@protoc_insertion_point(field_mutable:BuildRequest.botId)
  return _internal_mutable_botid();
}
inline const std::string& BuildRequest::_internal_botid() const {
  return botid_.Get();
}
inline void BuildRequest::_internal_set_botid(const std::string& value) {
  
  botid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BuildRequest::set_botid(std::string&& value) {
  
  botid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BuildRequest.botId)
}
inline void BuildRequest::set_botid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  botid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BuildRequest.botId)
}
inline void BuildRequest::set_botid(const char* value,
    size_t size) {
  
  botid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BuildRequest.botId)
}
inline std::string* BuildRequest::_internal_mutable_botid() {
  
  return botid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BuildRequest::release_botid() {
  // @@protoc_insertion_point(field_release:BuildRequest.botId)
  return botid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildRequest::set_allocated_botid(std::string* botid) {
  if (botid != nullptr) {
    
  } else {
    
  }
  botid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), botid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BuildRequest.botId)
}
inline std::string* BuildRequest::unsafe_arena_release_botid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildRequest.botId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return botid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BuildRequest::unsafe_arena_set_allocated_botid(
    std::string* botid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (botid != nullptr) {
    
  } else {
    
  }
  botid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      botid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildRequest.botId)
}

// string language = 2;
inline void BuildRequest::clear_language() {
  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BuildRequest::language() const {
  // @@protoc_insertion_point(field_get:BuildRequest.language)
  return _internal_language();
}
inline void BuildRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:BuildRequest.language)
}
inline std::string* BuildRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:BuildRequest.language)
  return _internal_mutable_language();
}
inline const std::string& BuildRequest::_internal_language() const {
  return language_.Get();
}
inline void BuildRequest::_internal_set_language(const std::string& value) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BuildRequest::set_language(std::string&& value) {
  
  language_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BuildRequest.language)
}
inline void BuildRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BuildRequest.language)
}
inline void BuildRequest::set_language(const char* value,
    size_t size) {
  
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BuildRequest.language)
}
inline std::string* BuildRequest::_internal_mutable_language() {
  
  return language_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BuildRequest::release_language() {
  // @@protoc_insertion_point(field_release:BuildRequest.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BuildRequest.language)
}
inline std::string* BuildRequest::unsafe_arena_release_language() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildRequest.language)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return language_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BuildRequest::unsafe_arena_set_allocated_language(
    std::string* language) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (language != nullptr) {
    
  } else {
    
  }
  language_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildRequest.language)
}

// string code = 3;
inline void BuildRequest::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BuildRequest::code() const {
  // @@protoc_insertion_point(field_get:BuildRequest.code)
  return _internal_code();
}
inline void BuildRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:BuildRequest.code)
}
inline std::string* BuildRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:BuildRequest.code)
  return _internal_mutable_code();
}
inline const std::string& BuildRequest::_internal_code() const {
  return code_.Get();
}
inline void BuildRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BuildRequest::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BuildRequest.code)
}
inline void BuildRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BuildRequest.code)
}
inline void BuildRequest::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BuildRequest.code)
}
inline std::string* BuildRequest::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BuildRequest::release_code() {
  // @@protoc_insertion_point(field_release:BuildRequest.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BuildRequest.code)
}
inline std::string* BuildRequest::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildRequest.code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BuildRequest::unsafe_arena_set_allocated_code(
    std::string* code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (code != nullptr) {
    
  } else {
    
  }
  code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildRequest.code)
}

// -------------------------------------------------------------------

// BuildResponse

// string imageId = 1;
inline void BuildResponse::clear_imageid() {
  imageid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BuildResponse::imageid() const {
  // @@protoc_insertion_point(field_get:BuildResponse.imageId)
  return _internal_imageid();
}
inline void BuildResponse::set_imageid(const std::string& value) {
  _internal_set_imageid(value);
  // @@protoc_insertion_point(field_set:BuildResponse.imageId)
}
inline std::string* BuildResponse::mutable_imageid() {
  // @@protoc_insertion_point(field_mutable:BuildResponse.imageId)
  return _internal_mutable_imageid();
}
inline const std::string& BuildResponse::_internal_imageid() const {
  return imageid_.Get();
}
inline void BuildResponse::_internal_set_imageid(const std::string& value) {
  
  imageid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BuildResponse::set_imageid(std::string&& value) {
  
  imageid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BuildResponse.imageId)
}
inline void BuildResponse::set_imageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imageid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BuildResponse.imageId)
}
inline void BuildResponse::set_imageid(const char* value,
    size_t size) {
  
  imageid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BuildResponse.imageId)
}
inline std::string* BuildResponse::_internal_mutable_imageid() {
  
  return imageid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BuildResponse::release_imageid() {
  // @@protoc_insertion_point(field_release:BuildResponse.imageId)
  return imageid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildResponse::set_allocated_imageid(std::string* imageid) {
  if (imageid != nullptr) {
    
  } else {
    
  }
  imageid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imageid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BuildResponse.imageId)
}
inline std::string* BuildResponse::unsafe_arena_release_imageid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildResponse.imageId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imageid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BuildResponse::unsafe_arena_set_allocated_imageid(
    std::string* imageid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imageid != nullptr) {
    
  } else {
    
  }
  imageid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imageid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildResponse.imageId)
}

// -------------------------------------------------------------------

// TurnMessage

// string parameter = 1;
inline void TurnMessage::clear_parameter() {
  parameter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TurnMessage::parameter() const {
  // @@protoc_insertion_point(field_get:TurnMessage.parameter)
  return _internal_parameter();
}
inline void TurnMessage::set_parameter(const std::string& value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:TurnMessage.parameter)
}
inline std::string* TurnMessage::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:TurnMessage.parameter)
  return _internal_mutable_parameter();
}
inline const std::string& TurnMessage::_internal_parameter() const {
  return parameter_.Get();
}
inline void TurnMessage::_internal_set_parameter(const std::string& value) {
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TurnMessage::set_parameter(std::string&& value) {
  
  parameter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TurnMessage.parameter)
}
inline void TurnMessage::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TurnMessage.parameter)
}
inline void TurnMessage::set_parameter(const char* value,
    size_t size) {
  
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TurnMessage.parameter)
}
inline std::string* TurnMessage::_internal_mutable_parameter() {
  
  return parameter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TurnMessage::release_parameter() {
  // @@protoc_insertion_point(field_release:TurnMessage.parameter)
  return parameter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TurnMessage::set_allocated_parameter(std::string* parameter) {
  if (parameter != nullptr) {
    
  } else {
    
  }
  parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TurnMessage.parameter)
}
inline std::string* TurnMessage::unsafe_arena_release_parameter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TurnMessage.parameter)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return parameter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TurnMessage::unsafe_arena_set_allocated_parameter(
    std::string* parameter) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parameter != nullptr) {
    
  } else {
    
  }
  parameter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parameter, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TurnMessage.parameter)
}

// -------------------------------------------------------------------

// PlayerResponse

// string response = 1;
inline void PlayerResponse::clear_response() {
  response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerResponse::response() const {
  // @@protoc_insertion_point(field_get:PlayerResponse.response)
  return _internal_response();
}
inline void PlayerResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:PlayerResponse.response)
}
inline std::string* PlayerResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:PlayerResponse.response)
  return _internal_mutable_response();
}
inline const std::string& PlayerResponse::_internal_response() const {
  return response_.Get();
}
inline void PlayerResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerResponse::set_response(std::string&& value) {
  
  response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerResponse.response)
}
inline void PlayerResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerResponse.response)
}
inline void PlayerResponse::set_response(const char* value,
    size_t size) {
  
  response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerResponse.response)
}
inline std::string* PlayerResponse::_internal_mutable_response() {
  
  return response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerResponse::release_response() {
  // @@protoc_insertion_point(field_release:PlayerResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerResponse.response)
}
inline std::string* PlayerResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlayerResponse.response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerResponse::unsafe_arena_set_allocated_response(
    std::string* response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response != nullptr) {
    
  } else {
    
  }
  response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bots_2eproto
